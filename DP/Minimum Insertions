#top-down
class Solution {
public:
    int t[501][501];

    int solve (string &s, int i, int j){
        if(i>=j) return 0;

        if(t[i][j] != -1)  return t[i][j];

        if(s[i] == s[j]) return solve(s,i+1,j-1);

        else
        return t[i][j] = 1 + min(solve(s,i+1,j),solve(s,i,j-1));
    }
    int minInsertions(string s) {
        int n = s.length();
        memset(t,-1,sizeof(t));
        return solve(s,0,n-1);
    }
};

#bottom-up(using blueprint)

class Solution {
public:
    int minInsertions(string s) {
        int n = s.length();
        vector<vector<int>>t(n, vector<int>(n,0)); //every single character in a string represents a plaindrome and thus it requires zero number of oprerations at the start, thats why i used 0 instead of -1

        for(int l = 2; l<=n; l++){
            for(int i = 0; l+i-1<n; i++){
                int j = i+l-1;
                if(s[i] == s[j]) 
                t[i][j] = t[i+1][j-1];

                else
                t[i][j] = 1 + min(t[i+1][j],t[i][j-1]);
            }
        }
        return t[0][n-1]; // min number of operations for the string from index '0' to 'n-1'
    }
};
