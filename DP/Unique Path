#top-down
class Solution {
public:
    int M,N;
    int t[101][101];

    int solve(int i, int j){
        if(i==M-1 && j==N-1) return 1;
        else if(i<0 || i>=M || j<0 || j>=N) return 0;

        if(t[i][j] != -1) return t[i][j];

        int right = solve(i,j+1);
        int down = solve(i+1,j);

        return t[i][j] = down+right;
    }

    int uniquePaths(int m, int n) {
        M = m;
        N = n;
        memset(t,-1,sizeof(t));
        return solve(0,0);
    }
};

#bottom-up
class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> t(m + 1, vector<int>(n + 1,0));

        t[0][0] = 1;// Actually this should be 0 but the question wants it to be 1.

        for (int j = 1; j < n; j++) {
            t[0][j] = 1;
        }
        for(int i = 1; i<m; i++){
            t[i][0] = 1;
        }

        for(int i = 1; i<m; i++){
            for(int j = 1; j<n; j++){
                t[i][j] = t[i-1][j] + t[i][j-1];
            }
        }
        return t[m-1][n-1];
    }
};
