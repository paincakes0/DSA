#bottom-up(using blueprint)

class Solution {
public:
    int longestPalindromeSubseq(string s) {
        int n = s.length();
        vector<vector<int>> t(n, vector<int>(n));

        for (int i = 0; i < n; i++) {
            t[i][i] = true; // every char in itself is a palindrome 
        }

        for (int l = 2; l <= n; l++) {
            for (int i = 0; i + l - 1 < n; i++) {
                int j = i + l - 1;

                if (s[i] == s[j])
                    t[i][j] = 2 + t[i + 1][j - 1];

                else
                    t[i][j] = max(t[i + 1][j], t[i][j - 1]); // return the longer palindromic string which is between index i to j
            }
        }
        return t[0][n - 1];// max length palindromic string in the given string 's'
    }
};
