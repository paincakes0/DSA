#top-down :time and spaceO(m*n)

class Solution {
public:
    int n,m;
    int t[201][201];

    int solve(vector<vector<int>>& dungeon, int i, int j){
        if(i>=m || i<0 || j>=n || j<0){
            return 1e9; // if it got out of bound just return a really nig number which obviously wont get selected
        }
        if(t[i][j] != -1) return t[i][j];
        if(i==m-1 && j==n-1){
            if(dungeon[i][j] > 0) return 1; // if the last last cell's is itself positive then we can just have the minimum value to get their which is 1
            else return (abs(dungeon[i][j]) + 1); // if the last cell's value is negative, in order to survive that we must have the exact postive value that cell has to negate the values andddd +1 in order to survive
        }
        //basic down and right code
        int down = solve(dungeon,i+1,j);
        int right = solve(dungeon,i,j+1);

        int result = min(right,down) - dungeon[i][j];
        if(result>0) return t[i][j] = result; // if the result is greater that means the value in the current cell is not greater than the value it got returned thus it requires 'this' much value in order to survive
        else return t[i][j] = 1; // the result is in negative so the value in current cell is much greater than the value it got returned so its a positive value thus it only requires min value
    }

    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        m = dungeon.size();
        n = dungeon[0].size();
        memset(t,-1,sizeof(t));
        return solve(dungeon,0,0);
    }
};


#bottom-up
idk why but this is the only way

class Solution {
public:
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        int m = dungeon.size();
        int n = dungeon[0].size();
        vector<vector<int>> t(m, vector<int>(n,0));

        for (int i = m - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                if (i == m - 1 && j == n - 1) {
                    if (dungeon[i][j] > 0) {
                        t[i][j] = 1;
                    } else {
                        t[i][j] = (abs(dungeon[i][j]) + 1);
                    }
                } 
                else {
                    int top = (i+1 >= m) ? 1e9 : t[i+1][j];
                    int left = (j+1 >= n) ? 1e9 : t[i][j+1];
                    
                    int result = min(top, left) - dungeon[i][j];
                    if (result > 0)
                        t[i][j] = result;
                    else
                        t[i][j] = 1;
                }
            }
        }
        return t[0][0];
    }
};
