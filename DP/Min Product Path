#bottom-up
THIS WAS A REALLY GOOD QUESTION AND MADE ME THINK A LOT IN 2D DP.

class Solution {
public:
    int MOD = 1e9 + 7;
    int maxProductPath(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();

        vector<vector<pair<long long,long long>>> t(m + 1, vector<pair<long long, long long>>(n + 1));
        t[0][0] = {grid[0][0],grid[0][0]};

        for (int i = 1; i < m; i++) {
            t[i][0] = {t[i - 1][0].first * grid[i][0],t[i-1][0].second * grid[i][0]};
        }
        for (int j = 1; j < n; j++) {
            t[0][j] = {t[0][j-1].first * grid[0][j],t[0][j-1].second * grid[0][j]};
        }

        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                long long downMax = t[i-1][j].first;
                long long downMin = t[i-1][j].second;

                long long rightMax = t[i][j-1].first;
                long long rightMin = t[i][j-1].second;

                t[i][j].first = max({grid[i][j]*rightMax,grid[i][j]*rightMin,grid[i][j]*downMax,grid[i][j]*downMin});
                t[i][j].second = min({grid[i][j]*rightMax,grid[i][j]*rightMin,grid[i][j]*downMax,grid[i][j]*downMin});
            }
        }
        auto [maxPrd,minPrd] = t[m-1][n-1];
        if(maxPrd>=0) return maxPrd%MOD;
        else return -1;
    }
};
