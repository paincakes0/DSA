#top-down(recursion + memoization)

class Solution {
public:
    int t[1001][1001];

    bool checkPal(string& s, int i, int j) {
        if (i >= j)
            return true;

        if(t[i][j] != -1) 
            return t[i][j];

        if (s[i] == s[j])
            return t[i][j] = checkPal(s, i + 1, j - 1);

            return t[i][j] = false;
    }
    string longestPalindrome(string s) {
        int n = s.length();
        memset(t, 1, sizeof(t));
        int maxL = INT_MIN;
        int sp = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                if (checkPal(s, i, j) == true) {
                    if (j - i + 1 > maxL) {
                        maxL = j - i + 1;
                        sp = i;
                    }
                }
            }
        }
        return s.substr(sp, maxL); // a inbuilt function in c++ to generate a substring from a string 's' given the starting and ending index
    }
};


#bottom-up

class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.length();
        vector<vector<int>> t(n, vector<int>(n));
        int maxL = 0;
        int sp = 0;
        for(int i = 0; i<n ; i++){
            t[i][i] = true;
            maxL = 1;
        }
        for (int l = 2; l <= n; l++) {
            for (int i = 0; i < n-l+1; i++) {
                int j = l + i - 1;

                if (s[i] == s[j] && l == 2) {
                    t[i][j] = true;
                    maxL = 2;
                    sp = i;
                } else if (s[i] == s[j] && t[i + 1][j - 1]) {
                    t[i][j] = true;
                    if (j - i + 1 > maxL) {
                        maxL = j - i + 1;
                        sp = i;
                    }
                }

                else {
                    t[i][j] = false;
                }
            }
        }
        return s.substr(sp, maxL);
    }
};
